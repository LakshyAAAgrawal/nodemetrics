from nodemetrics import Graph
import unittest
class testpoint(unittest.TestCase):
    def test_top_k_betweenness_centrality(self):
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] , [(0, 5), (1, 2), (2, 7), (3, 13), (0, 4), (5, 9), (6, 8), (4, 7), (1, 8), (8, 9), (10, 13), (6, 11), (3, 12), (6, 13)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5961538461538461 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4] , [(0, 4), (1, 4), (1, 2), (1, 3), (3, 4)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , [(0, 9), (1, 9), (2, 5), (3, 9), (4, 10), (4, 5), (4, 6), (7, 9), (6, 8), (8, 9), (8, 10)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6666666666666667 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] , [(0, 12), (1, 16), (2, 13), (3, 7), (1, 4), (5, 11), (5, 6), (7, 15), (8, 10), (9, 11), (6, 10), (10, 11), (12, 13), (7, 13), (3, 14), (4, 15), (6, 16), (13, 17)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5882352941176471 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] , [(0, 2), (0, 1), (2, 6), (0, 3), (1, 4), (4, 5), (6, 10), (3, 7), (6, 8), (1, 9), (1, 10), (9, 11), (1, 12), (13, 15), (7, 14), (15, 18), (5, 16), (4, 17), (1, 18)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7777777777777778 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] , [(0, 1), (1, 5), (2, 4), (3, 11), (0, 4), (5, 13), (2, 6), (7, 13), (0, 8), (3, 9), (10, 16), (5, 11), (12, 17), (13, 16), (11, 14), (1, 15), (7, 16), (9, 17), (15, 18), (12, 19)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6783625730994152 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] , [(0, 4), (1, 2), (2, 6), (3, 6), (2, 4), (5, 10), (0, 6), (5, 7), (1, 8), (8, 9), (6, 10), (10, 11)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6545454545454545 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] , [(0, 13), (1, 10), (2, 10), (3, 12), (4, 9), (0, 5), (6, 8), (6, 7), (3, 8), (6, 9), (7, 10), (7, 11), (7, 12), (7, 13)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7692307692307692 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] , [(0, 1), (1, 5), (2, 15), (0, 3), (4, 7), (5, 6), (6, 13), (3, 7), (8, 11), (6, 9), (10, 16), (11, 16), (2, 12), (2, 13), (0, 14), (7, 15), (14, 16)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5333333333333333 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] , [(0, 9), (1, 6), (2, 11), (3, 9), (1, 4), (5, 6), (3, 6), (1, 7), (5, 8), (5, 9), (5, 10), (3, 11)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5181818181818182 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] , [(0, 4), (1, 11), (2, 10), (3, 8), (4, 6), (0, 5), (6, 14), (6, 7), (8, 14), (6, 9), (10, 13), (3, 11), (11, 12), (9, 13), (5, 14)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6043956043956045 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] , [(0, 2), (1, 7), (1, 2), (3, 6), (4, 6), (5, 8), (6, 7), (2, 7), (8, 9), (3, 9), (3, 10), (5, 11)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6181818181818182 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] , [(0, 1), (1, 7), (2, 4), (3, 12), (4, 12), (2, 5), (6, 12), (7, 10), (8, 13), (9, 13), (2, 10), (1, 11), (5, 12), (3, 13)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5705128205128205 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] , [(0, 6), (1, 7), (2, 12), (3, 7), (4, 6), (0, 5), (2, 6), (7, 17), (1, 8), (6, 9), (4, 10), (5, 11), (12, 16), (3, 13), (8, 14), (10, 15), (6, 16), (2, 17), (7, 18)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.630718954248366 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8] , [(0, 7), (0, 1), (2, 4), (3, 7), (4, 8), (5, 6), (2, 6), (6, 7), (3, 8)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5535714285714285 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7] , [(0, 6), (1, 7), (2, 3), (1, 3), (3, 4), (3, 5), (5, 6), (6, 7)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5714285714285714 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , [(0, 5), (1, 7), (2, 10), (3, 9), (2, 4), (2, 5), (1, 6), (3, 7), (8, 10), (5, 9), (1, 10)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.4222222222222222 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] , [(0, 19), (0, 1), (1, 2), (3, 13), (1, 4), (1, 5), (6, 17), (7, 19), (8, 14), (9, 18), (10, 18), (10, 11), (3, 12), (13, 15), (1, 14), (2, 15), (1, 16), (16, 17), (2, 18), (15, 19)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6198830409356725 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] , [(0, 7), (1, 9), (1, 2), (3, 13), (1, 4), (1, 5), (6, 16), (2, 7), (5, 8), (9, 10), (10, 14), (11, 13), (11, 12), (13, 15), (6, 14), (4, 15), (3, 16)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] , [(0, 10), (1, 5), (2, 10), (3, 15), (4, 12), (5, 11), (6, 16), (5, 7), (4, 8), (8, 9), (10, 16), (11, 13), (10, 12), (12, 13), (1, 14), (8, 15), (4, 16)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5625 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] , [(0, 6), (0, 1), (0, 2), (0, 3), (1, 4), (5, 9), (1, 6), (1, 7), (7, 8), (4, 9)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7222222222222222 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6] , [(0, 2), (1, 5), (2, 4), (2, 3), (4, 6), (4, 5), (0, 6)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] , [(0, 6), (1, 17), (2, 12), (0, 3), (4, 6), (5, 8), (3, 6), (7, 17), (8, 15), (3, 9), (6, 10), (5, 11), (10, 12), (9, 13), (6, 14), (2, 15), (13, 16), (9, 17), (15, 18)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6339869281045751 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] , [(0, 3), (1, 12), (1, 2), (3, 12), (4, 5), (5, 6), (4, 6), (4, 7), (3, 8), (9, 11), (5, 10), (7, 11), (11, 12)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6212121212121212 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6] , [(0, 2), (0, 1), (2, 4), (3, 6), (1, 4), (1, 5), (4, 6)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] , [(0, 9), (1, 14), (2, 9), (3, 12), (4, 12), (5, 19), (6, 12), (3, 7), (8, 11), (4, 9), (10, 14), (6, 11), (5, 12), (5, 13), (14, 17), (11, 15), (8, 16), (12, 17), (16, 18), (2, 19), (13, 20)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7710526315789473 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] , [(0, 9), (1, 14), (1, 2), (3, 6), (4, 13), (0, 5), (6, 12), (7, 13), (8, 14), (1, 9), (0, 10), (8, 11), (11, 12), (6, 13), (12, 14), (7, 15)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5476190476190477 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8] , [(0, 4), (1, 4), (2, 3), (3, 5), (2, 4), (5, 6), (0, 6), (5, 7), (1, 8)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , [(0, 2), (1, 5), (2, 4), (2, 3), (4, 6), (5, 10), (6, 7), (7, 8), (1, 8), (5, 9), (1, 10)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5555555555555556 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] , [(0, 8), (1, 6), (2, 7), (3, 13), (4, 9), (5, 10), (6, 11), (4, 7), (4, 8), (9, 15), (1, 10), (2, 11), (3, 12), (7, 13), (6, 14), (6, 15)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.4761904761904762 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] , [(0, 11), (1, 18), (0, 2), (3, 18), (0, 4), (5, 7), (6, 18), (7, 12), (8, 14), (9, 13), (9, 10), (6, 11), (3, 12), (8, 13), (4, 14), (6, 15), (6, 16), (17, 18), (14, 18), (12, 19)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6666666666666666 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7] , [(0, 4), (0, 1), (2, 3), (3, 4), (4, 5), (5, 6), (0, 6), (2, 7)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6190476190476191 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7] , [(0, 3), (1, 4), (0, 2), (3, 6), (4, 7), (1, 5), (4, 6), (5, 7)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5952380952380952 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4] , [(0, 1), (1, 3), (2, 3), (3, 4), (1, 4)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5] , [(0, 2), (0, 1), (2, 5), (1, 3), (4, 5), (0, 5)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6000000000000001 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5] , [(0, 1), (1, 2), (0, 2), (0, 3), (1, 4), (0, 5)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7000000000000001 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8] , [(0, 8), (1, 2), (2, 7), (2, 3), (4, 5), (2, 5), (6, 7), (7, 8), (4, 8)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5357142857142857 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] , [(0, 11), (1, 12), (2, 10), (1, 3), (0, 4), (4, 5), (2, 6), (5, 7), (1, 8), (8, 9), (7, 10), (11, 19), (3, 12), (13, 15), (3, 14), (14, 15), (7, 16), (3, 17), (9, 18), (13, 19), (9, 20)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5263157894736842 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5] , [(0, 2), (1, 3), (2, 3), (3, 4), (2, 4), (0, 5)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6000000000000001 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8] , [(0, 3), (1, 4), (2, 7), (3, 5), (4, 7), (5, 7), (4, 6), (7, 8), (3, 8)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6964285714285714 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] , [(0, 10), (1, 11), (2, 7), (2, 3), (4, 14), (5, 13), (6, 12), (7, 9), (8, 9), (2, 9), (10, 14), (9, 11), (10, 12), (9, 13), (8, 14)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7142857142857143 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] , [(0, 5), (1, 2), (2, 4), (2, 3), (4, 10), (4, 5), (3, 6), (1, 7), (6, 8), (6, 9), (2, 10), (6, 11)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6909090909090909 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , [(0, 4), (1, 7), (2, 4), (3, 9), (4, 9), (5, 8), (6, 10), (3, 7), (3, 8), (9, 10), (8, 10)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5333333333333333 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5] , [(0, 1), (1, 3), (2, 3), (3, 5), (0, 4), (2, 5)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6000000000000001 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6] , [(0, 6), (1, 3), (1, 2), (3, 4), (4, 6), (1, 5), (1, 6)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6666666666666666 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] , [(0, 15), (1, 15), (0, 2), (3, 12), (4, 9), (5, 9), (3, 6), (7, 10), (8, 11), (9, 12), (10, 11), (4, 11), (12, 16), (12, 13), (11, 14), (13, 15), (2, 16)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6541666666666667 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4] , [(0, 4), (1, 3), (0, 2), (0, 3), (3, 4)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.5 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4] , [(0, 2), (1, 2), (2, 3), (1, 3), (0, 4)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6666666666666666 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4] , [(0, 1), (1, 2), (2, 4), (2, 3), (3, 4)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6666666666666666 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] , [(0, 4), (1, 17), (2, 15), (1, 3), (4, 17), (5, 17), (6, 18), (0, 7), (0, 8), (9, 10), (3, 10), (7, 11), (6, 12), (2, 13), (11, 14), (6, 15), (5, 16), (11, 17), (17, 18)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7712418300653595 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] , [(0, 5), (1, 14), (0, 2), (3, 7), (4, 10), (5, 7), (6, 9), (1, 7), (8, 9), (7, 9), (0, 10), (0, 11), (12, 14), (5, 13), (3, 14)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6758241758241759 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] , [(0, 2), (0, 1), (2, 3), (3, 6), (4, 6), (1, 5), (5, 6), (5, 7), (7, 8), (5, 9)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6527777777777778 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] , [(0, 5), (1, 19), (2, 14), (3, 12), (4, 11), (5, 18), (1, 6), (5, 7), (4, 8), (4, 9), (10, 17), (11, 15), (11, 12), (9, 13), (10, 14), (15, 16), (8, 16), (17, 20), (18, 19), (9, 19), (5, 20)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6157894736842106 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6] , [(0, 6), (1, 6), (2, 6), (0, 3), (4, 6), (1, 5), (3, 6)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.8666666666666667 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8] , [(0, 7), (1, 5), (2, 3), (1, 3), (4, 5), (5, 8), (5, 6), (6, 7), (6, 8)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6785714285714285 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] , [(0, 11), (0, 1), (2, 5), (3, 4), (0, 4), (0, 5), (6, 15), (7, 10), (3, 8), (0, 9), (2, 10), (11, 14), (1, 12), (5, 13), (4, 14), (2, 15)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.7095238095238096 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] , [(0, 10), (1, 7), (2, 6), (3, 10), (4, 5), (3, 5), (6, 11), (7, 8), (3, 8), (9, 11), (7, 10), (7, 11)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6363636363636364 ,delta=0.00001 )
        a=Graph( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] , [(0, 4), (1, 8), (2, 3), (3, 5), (4, 17), (5, 13), (1, 6), (2, 7), (8, 18), (8, 9), (7, 10), (11, 12), (9, 12), (3, 13), (2, 14), (15, 16), (10, 16), (3, 17), (17, 18)] )
        self.assertAlmostEqual(a.top_k_betweenness_centrality()[1], 0.6209150326797386 ,delta=0.00001 )

if __name__=='__main__':
    unittest.main()
